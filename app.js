import "dotenv/config";
import express from "express";
import {
  InteractionType,
  InteractionResponseType,
  InteractionResponseFlags,
  MessageComponentTypes,
  ButtonStyleTypes,
} from "discord-interactions";
import {
  VerifyDiscordRequest,
  getRandomEmoji,
  DiscordRequest,
} from "./utils.js";

import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/gm, "\n"),
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

// Create an express app
const app = express();
// Get port, or default to 3000
const PORT = process.env.PORT || 3000;
// Parse request body and verifies incoming requests using discord-interactions package
app.use(express.json({ verify: VerifyDiscordRequest(process.env.PUBLIC_KEY) }));

// Store for in-progress games. In production, you'd want to use a DB
const activeGames = {};

const doc = new GoogleSpreadsheet(
  "1G58gg-BKW-fpYPudBMDZztFism5FJ_OME9kvzvjxm2w",
  serviceAccountAuth
);

const N_ROWS = 138;
const N_COLS = 27;

const DATA_ROW_START = 4;
const DATA_COL_START = 2;

const PILOT_ROW = 2;
const QUAL_COL = 1;

const NON_DATA_ROWS = [13, 17, 20, 26, 35, 44, 45, 50, 59, 65, 70, 75, 82, 90, 122];

const present_pilots = ['Maj "Apollo" Dev (AOPS) 403'];
const pilot_modices = present_pilots.map(pilot => pilot.match());

(async function () {
  await doc.loadInfo(); // loads document properties and worksheets
  const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
  console.log(sheet.title);
  const cells = await sheet.loadCells("A1:AA");
  const cell = sheet.getCell(3, 5);
  
  const pilots = [];
  for (let i = DATA_COL_START; i < N_COLS; i++) {
    pilots.push(sheet.getCell(PILOT_ROW, i).value.trim());
  }
  
  const qual_count_map = {}
  const quals = [];
  let qual;
  for (let i = DATA_ROW_START; i < N_ROWS; i++) {
    if (NON_DATA_ROWS.includes(i)) continue;
    qual = sheet.getCell(i, QUAL_COL).value
    quals.push(qual)
    qual_count_map[qual] = { count: 0, pilots: []};
  }

  let cell_value
  qual = null
  for (let i = DATA_ROW_START; i < N_ROWS; i++) {
    if (NON_DATA_ROWS.includes(i)) continue;
    qual = sheet.getCell(i, QUAL_COL).value
    for (let j = DATA_COL_START; j < N_COLS; j++) {
      cell_value = sheet.getCell(i, j).value
      if (cell_value == 'NOGO') {
        qual_count_map[qual].count += 1
        qual_count_map[qual].pilots.push(sheet.getCell(PILOT_ROW, j).value)
      }
    } 
  }
  const sorted = []
  for (const [qual, datum] of Object.entries(qual_count_map)) {
    if (qual === null) continue;
    sorted.push({
      qual,
      pilots: datum.pilots,
      count: datum.counts
    })
    console.log(`${qual}: ${datum.count}`)
    console.log(datum.pilots.join(', '))
  }
  // console.log(qual_count_map);
  
})();


/**
 * Interactions endpoint URL where Discord will send HTTP requests
 */
app.post("/interactions", async function (req, res) {
  // Interaction type and data
  const { type, id, data } = req.body;

  /**
   * Handle verification requests
   */
  if (type === InteractionType.PING) {
    return res.send({ type: InteractionResponseType.PONG });
  }

  /**
   * Handle slash command requests
   * See https://discord.com/developers/docs/interactions/application-commands#slash-commands
   */
  if (type === InteractionType.APPLICATION_COMMAND) {
    const { name } = data;

    if (name === "quals") {
      // Send a message into the channel where command was triggered from

      await doc.loadInfo(); // loads document properties and worksheets
      console.log(doc.title);
      const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
      console.log(sheet.title);
      const cells = await sheet.loadCells("A1:AA");
      const cell = sheet.getCell(3, 5);
      console.log(cell.value); // 'Larry Page'

      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          // Fetches a random emoji to send from a helper function
          content: "hello world",
        },
      });
    }
  }
});

app.listen(PORT, () => {
  console.log("Listening on port", PORT);
});
